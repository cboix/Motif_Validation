#!/bin/zsh

OUTSEP="\t"
HSTR=0
COL1=1

########################################## PARSE ARGUMENTS
if [ $# -eq 0 ]; then
		echo >&2 "USAGE: $0 <mode> [OPTIONS] <file...>
   modes:
       bamreg -o -r -R file...
          reads in one more more bam files and outputs sequence and regions sorted
          -r require perfect match cigar string (NOTE: 0 not implemented!) [default: 0] 
          -R assume input is sam file [default: 0]
       chrfix -o -c file1 **
          adds chr to chromosome names if they do not already start with it
          -r string to force prefix with
       cmd -r -R file1
          break file by name in first column and run command on each separation
          -r command each separation should be piped [default: cat]
          -R output filename (with %s replaced by name)
       crop -o -s -c -C file1 file2 *
          crops each region in file1 to those overlapping file2
          regions may be repeated if they are in either file1 or file2
       filter -r file1 **
          filters names to those found in space separated list in -r
       flatten -o -s -c file1 
          takes each region name (first -c columns) and flattens it
          strand removed with -s 0; with -s 1 things on both strands are shown twice
       merge -c file... *
          merges sorted lists of regions
          -c -1 sorts lines lexicographically 
       mergename -c -o file... *
          merges files with a column added to the end with the filename
          -c -1 sorts lines lexicographically 
       namecut -o -r file1 **
          removes everything in name after -r
       namerepl -o -r file1 **
          replaces name with -r
       normadj -o -c -r -R file1 **
          adds column with score minus mean scores of -R values on each side of each region
          adjacency is determined by input file order
          when there are insufficient values, averages are produced amongst those available (equally)
          -c column containing score
          -r input separator [default matches -o]
          -R number of values to use on either side [default: 0]
       prec-overlap -o -s -r file1 *
          prec-overlap, except will deal with strands and output format
          list of regions specified in -r (space separated)
          if both strands present or -s 0, outputs strand .
       rank -o -c file1 ***
          adds column with rank (1=highest) sorting by -c; worst rank given to ties
       remove -o -c -C file1 file2 *
          removes all regions in file2 from file1
       replbases -o -c -s -r -R file1
          replaces start/end with specified base within region
          round to nearest, breaking ties in forward direction
          -r indicates the base within the region (0 for start, 1 for end) [default: 0]
          -R like -r, except for end [default: -r]
          -s take strand into account
       resort -c -r file1
          sorts regions, but may be faster if one or more chromosomes are already sorted
          -r (semi-colon separated) overrides chromosome ordering
       seq -o -c -r -s file1 **
          adds column with sequence
          if sequence cannot be extracted, blank
          uppercase/lowercase preserved as in alignment
          NOTE: when used as input for seqreads, use -s 0 here
          -r organism
       seqreads -o -c -s -C -r -R file1 file2 *
          add column to file1:
          1. bases for a read in file2 that overlaps a region in file1 (- for bases missing in read)
          2. the base within the read that the match starts : the length of the read : relative read strand
             values are accurately only if strand is supplied in file2 (regardless of -s)
          -r passed on to grep-overlap (e.g. -E1 or -t for matched strand)
          -R column in file2 containing sequence (must always be on + strand) [default: 1]
          -s will output sequence on strand indicated in file1; otherwise file1 assumed to be + strand
       shift -o -r -c -s file1
          shifts regions forward by -r
       sort -c file1
          sorts regions (input regions for all other modes should be sorted)
          -c -1 sorts lines lexicographically 
       sover -o -r -R file1
          takes input file with lines: region|valX and create region|val1#c1|val2#c2|... (| indicates -o)
          requires all lines for region to be contiguous
          -r input separator [default matches -o]
          -R vals should be repeated rather than shown with numbers [default: 0]
       sovermerge -o -r -R file1
          takes merged sover files and merges the values
          requires all lines for region to be contiguous (i.e. input sover must be merged in order)
          -r input separator [default matches -o]
          -R vals should be repeated rather than shown with numbers [default: 0]
             if -R 1, input must be -R 1 as well; if -R 0 input can be either
       tile -o file1
          produces non-overlaping set of regions that indicate which regions overlap each
          list is sorted by name
       uniqc -c -o file1 *
          removes duplicate lines and adds column to front with count
       window -o -r -c -R -s file1 **
          -r window added to start/end
          -R start/end should be replaced with center (-R 1/2 break ties upstream/downstream using -s) 

   *   requires sorted input
   **  requires sorted input if output is to be sorted
   *** output should not be expected to be sorted

   -c   Number of columns to skip (including name; for FILE1) [default: $COL1]
   -C   Number of columns to skip (including name; for FILE2) [default: -c]
   -o   Output separator [default: tab]
   -r   Additional parameter 1
   -R   Additional parameter 2
   -s   Has strand [default: $HSTR]"
	exit 1
fi

MODE=$1
shift

while getopts o:s:c:C:r:R: o
do      case "$o" in
		s)		HSTR="$OPTARG";;
		o)		OUTSEP="$OPTARG";;
		c)		COL1="$OPTARG";;
		C)		COL2="$OPTARG";;
		r)		PARAM="$OPTARG";;
		R)		PARAM2="$OPTARG";;
		[?])	echo >&2 "ERROR: command line parameter not recognized."; exit 1;;
        esac
done
shift $(expr $OPTIND - 1)

[ ! -z "$1" -a "$1" != "-" ] && FILE1=$1 || FILE1=/dev/stdin
[ ! -z "$2" -a "$2" != "-" ] && FILE2=$2 || FILE2=/dev/stdin
[ -z "$COL2" ] && COL2=$COL1

case "$MODE" in
	bamreg)
		if [ $# -gt 1 ]; then
			for i in "$@"; do
				L="$L <($0 bamreg -o '$OUTSEP' -r '$PARAM' -R '$PARAM2' '${i//'/'\\''}')"
			done
			eval $0 merge $L
		else
			# TODO: implement -r 0
			if [ "$PARAM" != 1 ]; then 
				echo >&2 "ERROR: bamreg -r 0 not implemented! Must select -r 1"
				exit 1
			fi

			if [ "$PARAM2" = 1 ]; then 
				gunzip -cf < $FILE1 | grep -v "^@"
			else
				samtools view $FILE1
			fi | awk -F"\t" -vOFS="$OUTSEP" '$6 ~ /^[0-9]*M$/{print $10, $3, $4, $4 + length($10) - 1, and($2, 16) ? "-" : "+"}' | $0 resort
		fi
		;;

	chrfix)
		gunzip -cf < $FILE1 | if [ -z "${PARAM+unset}" ]; then
			awk -F"\t" -vOFS="$OUTSEP" -vC=$COL1 '{$(C+1)= ($(C+1)~/^chr/ ? "" : "chr") $(C+1)}; 1' $FILE1
		else
			awk -F"\t" -vOFS="$OUTSEP" -vP="$PARAM" -vC=$COL1 '{$(C+1)= P $(C+1)}; 1' $FILE1

		fi
		;;

	cmd)
		[ -z "$PARAM" ] && PARAM="cat"
		gunzip -cf < $FILE1 | awk -vC="$PARAM" -vF=$PARAM2 '
			{
				of = sprintf(F, $1)
				print $0 | (C " > " of)
			}
			'
		;;

	crop)
		grep-overlap -c1 $COL1 -c2 $COL2 -t${HSTR/2/1} $FILE1 $FILE2 | awk -F"|" -vOFS="$OUTSEP" -vC=$COL1 '{
				n = split($1,A,/[\t ]/)
				L = A[1]
				for (i=2; i<=n; i++)
					L = L OFS ((i==(C+2)) ? $7 : (i==(C+3)) ? $8 : A[i])
				print L
			}' | $0 sort -c $COL1
		;;

	filter)
		gunzip -cf < $FILE1 | awk -vRL="$PARAM" '
			BEGIN{
				split(RL, A, / /)
				for (i in A)
					R[A[i]]
			}

			$1 in R'
		;;

	flatten)
		# flattens and if HSTR then expands non +/- to both +/-
		gunzip -cf < $FILE1 | awk -vHS="$HSTR" -vC=$COL1 '
			BEGIN{
				split("+ - .", S, / /)
			}

			{
				for (i=1; i<=3; i++) 
					if ((HS && i == 1 && $(C+4) != S[2]) || (HS && i == 2 && $(C+4) != S[1]) || (!HS && i == 3))
					{
						L = $(C+1) SUBSEP S[i]
						for (j=1; j<=C; j++)
							L = L SUBSEP $j
						print "+", L, $(C+2), $(C+3)
					}
			}' | $0 sort | prec-overlap "+" | awk -vOFS="$OUTSEP" -vC=$COL1 '
				{
					split($2, A, SUBSEP)
					L = ""
					for (i=1; i<=C; i++)
						L = L A[i+2] OFS
					print L A[1], $3, $4, A[2]
				}' | $0 sort -c $COL1
		;;

	merge|mergename)
		# note: these can accept more than two input files so we do not use FILE1 and FILE2

		if [ $# -gt 16 ]; then
			# sort command below does not deal well with more than 16 input files
			# --> make recursive calls
			E=0
			NL=1
			for i in "$@"; do
				# create a new BL every 16; let the last one be arbitrarily long
				# (recursively create more)
				if [ "$E" -eq 16 -a "$NL" -lt 16 ]; then
					L="$L <(eval $0 $MODE -c $COL1 $BL)"
					BL=""
					E=0
					NL=$(expr "$NL" + 1)
				fi

				E=$(expr "$E" + 1)
				BL="$BL '${i//'/'\\''}'"
			done
			L="$L <(eval $0 $MODE -c $COL1 $BL)"
		else
			if [ "$MODE" = "merge" ]; then 
				for i in "$@"; do
					if [ "$i" = "-" ]; then 
						L="$L <(gunzip -cf < /dev/stdin)"
					else
						L="$L <(gunzip -cf < '${i//'/'\\''}')"
					fi
				done
			elif [ "$MODE" = "mergename" ]; then
				for i in "$@"; do
					if [ "$i" = "-" ]; then 
						L="$L <(gunzip -cf < /dev/stdin | awk -vOFS='$OUTSEP' '{print \$0, \"-\"}')"
					else
						L="$L <(gunzip -cf < '${i//'/'\\''}' | awk -vOFS='$OUTSEP' -vN='${i//'/'\\''}' '{print \$0, N}')"
					fi
				done
			fi
		fi

		if [ "$COL1" = "-1" ]; then 
			LX=""
		else
			x=$(expr $COL1 + 1)
			y=$(expr $x + 1)
			LX="-k$x,$x -k$y,${y}n"
		fi

		LC_ALL=C eval sort -T/local/scratch $LX -s -m $L
		;;

	namecut)
		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -vN="$PARAM" '{sub(N ".*$", "", $1)}; 1'
		;;

	namerepl)
		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -vN="$PARAM" '{$1 = N}; 1'
		;;

	normadj)
		[ -z "$PARAM" ] && PARAM="$OUTSEP"
		[ -z "$PARAM2" ] && PARAM2="0"

		gunzip -cf < $FILE1 | awk -vN=$PARAM2 -vOFS="$OUTSEP" -F"$PARAM" -vCC="$COL1" '
			function NV(v, ws, n) { 
				return v - ((n>1) ? ((ws - v) / (n - 1)) : 0)
			}

			BEGIN{
				# read in the first N values -- nothing to print yet
				for (f=1; f<=N; f++)
				{
					if (getline <= 0)
					{
						# if we do not have N values, we subtract all other values
						# from the ones we have
						for (m=1; m<f; m++)
							print L[m], V[m] - ((WS - V[m]) / (f - 2))
						exit
					}

					V[f] = $CC
					L[f] = $0
					WS += $CC
				}


				# print out the first N values, each time reading one value in
				for (m=1; m<=N; m++)
				{
					if (getline <= 0)
					{
						# if we run out here, we have N values to print
						# total number of values read in so far is N + m - 1
						NM = N + m - 1
						for (j=1; j<=N; j++)
						{
							# when m goes above N+1, we need to start removing values 
							# from the front
							if (m > (N+1))
							{
								WS -= V[m - N - 1]
								NM--
							}
							print L[m], NV(V[m], WS, NM)
							m++
						}
						exit
					}
					V[NR] = $CC
					L[NR] = $0
					WS += $CC

					print L[m], NV(V[m], WS, N+m)
				}

				NX = 2 * N + 1
			}

			{
				# position of first(+new last) and middle values
				f = NR%NX
				m = (NR+N+1)%NX

				# add in the new value, subtract out the first value
				WS += $CC - V[f]

				# update stored values/lines
				V[f] = $CC
				L[f] = $0

				# print middle value
				print L[m], NV(V[m], WS, NX)
			}

			END{
				# print out the last N values
				if (NX != "")
					for (i=1; i<=N; i++)
					{
						f = (NR+i) % NX
						m = (NR+i+N+1) % NX

						WS -= V[f]

						print L[m], NV(V[m], WS, NX-i)
					}
			}'
		;;
		
	prec-overlap)
		if [ $HSTR = 0 ]; then
			gunzip -cf < $FILE1 | eval prec-overlap $PARAM | awk -F"\t" -vOFS="$OUTSEP" '{print $1, $2, $3, $4, "."}'
		
		else
			TMPFILE=$(mktemp /local/scratch/pk.rtool.XXXXXX)
			gunzip -cf < $FILE1 | awk '$5!="+"&&$5!="-"{$5="."}; {print $1$5, $2, $3, $4}'  > $TMPFILE
			for i in $(echo $PARAM); do 
				PLUSFIRSTLIST="$PLUSFIRSTLIST $i+ $i- $i."
				MINUSFIRSTLIST="$MINUSFIRSTLIST $i- $i+ $i."
			done
			(
				eval prec-overlap $PLUSFIRSTLIST < $TMPFILE | awk '$1 ~ /-$/'
				eval prec-overlap $MINUSFIRSTLIST < $TMPFILE | awk '$1 ~ /+$/'
				awk '{sub(/.$/, ".", $1); print}' $TMPFILE | tr ' ' '\t'
			) | $0 sort | eval prec-overlap $PLUSFIRSTLIST | awk -vOFS="$OUTSEP" '{print substr($1, 1, length($1)-1), $2, $3, $4, substr($1, length($1))}'

			rm -f $TMPFILE
		fi
		;;

	rank)
		gunzip -cf < $FILE1 | LC_ALL=C sort -T/local/scratch -k${COL1},${COL1}gr | awk -vOFS="$OUTSEP" -vC=$COL1 '
			LastS != $C{for (i=1; i<=NL; i++) print L[i], (NR-1); LastS=$C; NL=0}
			{L[++NL] = $0}
			END{for (i=1; i<=NL; i++) print L[i], NR}'
		;;

	remove)
		TMPFILE=$(mktemp /local/scratch/pk.rtool.XXXXXX)
		cat $FILE1 > $TMPFILE
		$0 merge <(gunzip -cf < $TMPFILE | awk -vC=$COL1 '{print "On", $(C+1), $(C+2), $(C+3)}') <(gunzip -cf < $FILE2 | awk -vC=$COL2 '{print "Off", $(C+1), $(C+2), $(C+3)}') | prec-overlap Off On | pcut -m 1 _On | $0 crop -c $COL1 -o $OUTSEP $TMPFILE -
		rm -f $TMPFILE
		;;

	replbases)
		[ -z "$PARAM" ] && PARAM="0"
		[ -z "$PARAM2" ] && PARAM2="$PARAM"
		
		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -vC=$COL1 -vHS=$HSTR -vB1="$PARAM" -vB2="$PARAM2" '
			{

				if (HS && $(C+4)=="-")
				{
					x = $(C+3) - int(($(C+3) - $(C+2)) * B2 + 0.5)
					$(C+3) = $(C+3) - int(($(C+3) - $(C+2)) * B1 + 0.5)
				}
				else
				{
					x = $(C+2) + int(($(C+3) - $(C+2)) * B1 + 0.5)
					$(C+3) = $(C+2) + int(($(C+3) - $(C+2)) * B2 + 0.5)
				}
				$(C+2) = x

				print
			}' | $0 sort -c $COL1
		;;

	resort)
		TMPDIR=$(mktemp -d /local/scratch/pk.rtool.XXXXXX)

		gunzip -cf < $FILE1 | awk -vD=$TMPDIR -vC=$COL1 '
			{c = $(C+1)}

			!(c in X) {
				X[c] = ++NC
				L[c] = $(C+2)
				F[c] = 0
			}

			$(C+2) < L[c]{F[c]=1}

			{L[c] = $(C+2)}

			{print $0 > (D "/" X[c] ".chr")}

			END{
				for (i in X)
					print i, X[i], F[i]
			}
		' | if [ ! -z "$PARAM" ]; then
			Sort.awk -vS="1:$PARAM"
		else
			LC_ALL=C sort -k1,1
		fi | cut -f2- -d' ' | while read i; do
			if [ "${i/* /}" = 1 ]; then
				$0 sort -c $COL1 $TMPDIR/${i/ */}.chr
			else
				cat $TMPDIR/${i/ */}.chr
			fi
		done

		rm -rf $TMPDIR
		;;

	seq)
		TMPFILE=$(mktemp /local/scratch/pk.rtool.XXXXXX)
		gunzip -cf < $FILE1 > $TMPFILE

		awk -vC=$COL1 -vHS=$HSTR '{print NR, $(C+1), $(C+2), $(C+3), (HS && $(C+4) == "-") ? "-" : "+"}' $TMPFILE | extract-mfa -k 1 $(GetOrgVars.sh $PARAM ALIGNFILE) | awk -vIF=$TMPFILE -vOFS="$OUTSEP" -vC=$COL1 '
			NR%4==1 {
				info = $1 " " $2 " " $3 " " $4
				getline < IF
				line = $0
				good = ((++N) " " $(C+1) " " $(C+2) " " $(C+3)) == info
			}

			NR%4==3{
				print line, good ? $0 : ""
			}' 
				
		;;

	seqreads)
		# note: input sequence always against plus strand, but flag will indicate
		# if original sequence was negative strand

		[ -z "$PARAM2" ] && PARAM2="1"

		# no strand --> same as + strand
		if [ "$HSTR" = 0 ]; then
			strcol="_+"
		else
			strcol=1.$(expr $COL1 + 4)
		fi

		# pcut produces:
		# 1-4.  read seq/start/end/strand
		# 5-6.  overlap start/end
		# 7-10. query line/start/end/strand
		eval grep-overlap $PARAM -c1 $COL1 $FILE1 $FILE2 \
			| pcut -t '|' -T '|' -f 2.$PARAM2 2.$(expr $COL2 + 2) 2.$(expr $COL2 + 3) 2.$(expr $COL2 + 4) 7 8 1 1.$(expr $COL1 + 2) 1.$(expr $COL1 + 3) $strcol \
			| awk -vOFS="$OUTSEP" -F"|" '
				BEGIN{
					Rev["A"]="T"
					Rev["T"]="A"
					Rev["G"]="C"
					Rev["C"]="G"
					Rev["U"]="A"
				}

				{
					if ($5 == 0 && $6 == 0)
					{
						# empty overlap with grep-overlap -e1/-E1
						print $7, "", ""
						next
					}

					s = RepChar("-", $5-$8) substr($1, $5-$2+1, $6-$5+1) RepChar("-", $9-$6)

					# starting base of the match within the read and length of read
					fb = (1 + ($4!="-" ? ($5-$2) : ($3-$6))) ":" ($3-$2+1) ":" (($4 == $10) ? "+" : "-")

					# read seq is always on positive strand
					if ($10 == "-")
						s = RevComp(s)

					print $7, s, fb
				}

				function RepChar(Chr, Num,   i, out)
				{
					out = ""
					for (i=1; i<=Num; i++)
						out = out Chr
					return out
				}

				function RevComp(s,   r, i, b)
				{
					for (i=1; i<=length(s); i++)
					{
						b = substr(s,i,1)
						r = ((b in Rev) ? Rev[b] : b) r
					}

					return r
				}
			'
		;;  

	shift)
		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -vHS=$HSTR -vC=$COL1 -vS=$PARAM '
			$(C+4)=="-" && HS{
				$(C+2)-=S
				$(C+3)-=S
			}

			$(C+4)!="-" || !HS{
				$(C+2)+=S
				$(C+3)+=S
			}

			$(C+2)<1 {
				$(C+3)+=1-$(C+2)
				$(C+2)=1
			}

			1' | $0 sort -c $COL1
		;;

	sort)
		if [ "$COL1" = "-1" ]; then 
			gunzip -cf < $FILE1 | LC_ALL=C sort -T/local/scratch
		else
			x=$(expr $COL1 + 1)
			y=$(expr $x + 1)

			gunzip -cf < $FILE1 | LC_ALL=C sort -T/local/scratch -k$x,$x -k$y,${y}n
		fi
		;;

	sover)
		[ -z "$PARAM" ] && PARAM="$OUTSEP"

		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -F"$PARAM" -vNN="$PARAM2" '
				function P (LL) {
					if (NS > 0)
					{
						for (i=1; i<=NS; i++)
							LL = LL OFS S[i] (NN ? "" : ("#" X[S[i]]))

						print L LL

						delete X
						delete S
						NS=0
					}
				}

				$1 != L {
					P()
					L=$1
				}

				NN || !($2 in X) {S[++NS]=$2}

				{X[$2]++}

				END{P()}
			'
		;;

	sovermerge)
		[ -z "$PARAM" ] && PARAM="$OUTSEP"

		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -F"$PARAM" -vNN="$PARAM2" '
				function P (LL) {
					if (NS > 0)
					{
						for (i=1; i<=NS; i++)
							LL = LL OFS S[i] (NN ? "" : ("#" X[S[i]]))

						print L LL

						delete X
						delete S
						NS=0
					}
				}

				$1 != L {
					P()
					L=$1
				}

				{
					for (i=2; i<=NF; i++)
					{
						if (NN)
							S[++NS] = $i
						else
						{
							split($i, A, /#/)

							if (!(A[1] in X))
								S[++NS] = A[1]

							X[A[1]] += A[2] == "" ? 1 : A[2]
						}
					}
				}

				END{P()}
			'
		;;

	tile)
		TMPFILE=$(mktemp /local/scratch/pk.rtool.XXXXXX)
		$0 flatten $FILE1 > $TMPFILE
		# NOTE: the first line creates a list of "starts"
		awk '{print $2, $3; print $2, $4+1}' $TMPFILE | $0 sort -c 0 | uniq \
			| awk -vOFS="\t" '(L != "" && LChr == $1){print $1, L, $2-1}; {LChr=$1; L=$2}' \
			| grep-overlap -c1 0 - $TMPFILE \
			| awk -F"|" -vOFS="$OUTSEP" '
				$1 != L{P(); L=$1; delete R}
				{split($2,A,/[ \t]/); R[A[1]] = A[1]}
				function P(  i, n, RL) {
					n = asort(R)
					for (i=1; i<=n; i++)
						RL = RL "+" R[i]
					if (L != "")
						print substr(RL,2), L
				}
				END{P()}
			'
		rm -f $TMPFILE
		;;


	uniqc)
		gunzip -cf < $FILE1 | awk -vOFS="$OUTSEP" -vC=$COL1 '
			$(C+1) != LC || $(C+2) != LS {
				P()
				LC = $(C+1)
				LS = $(C+2)
			}

			{L[$0]++}

			function P () {
				for (i in L)
					print L[i], i
				delete L
			}

			END{P()}
		'
		;;

	window)
		gunzip -cf < $FILE1 | if [ -z "$PARAM2" -o "$PARAM2" = 0 ]; then 
			awk -vW=$PARAM -vOFS="$OUTSEP" -vC=$COL1 '
				{
					$(C+2) = ($(C+2) > W) ? ($(C+2)-W) : 1
					$(C+3) += W
					print	
				}'
		else
			awk -vW=$PARAM -vOFS="$OUTSEP" -vC=$COL1 -vP="$PARAM2" -vHS="$HSTR" '
				{
					t = (HS && $(C+4)=="-")
					if (P==2)
						t = 1 - t

					c = int(($(C+2) + $(C+3) + t)/2)
					$(C+2) = (c > W) ? (c-W) : 1
					$(C+3) = c + W
					print	
				}' | $0 sort -c $COL1
		fi
		;;

	*)
		echo >&2 "ERROR: mode invalid"; exit 1

esac

